#microdesafio
"""En la funci√≥n de nuestro ejercicio hay un fallo potencial (aritm√©tico), averigua cu√°ndo sucede y retorna el valor None en ese caso especial, en cualquier otro caso devuelve el resultado normal de la funci√≥n.

>>> def dividir(a, b):
return a/b

Pistaüòâ : El fallo es aritm√©tico y se da por un valor que no podr√≠a pasarse por el par√°metro b

a=float(input("Ingrese un numero: "))
b=float(input("Ingrese otro numero: "))

def dividir(a, b):
    try:
        resultado = a/b
        return resultado
    except ZeroDivisionError:
        return None # Manejar la divisi√≥n por cero retornando None

print("El resultado de la division es: ", dividir(a,b))
"""

"""Puede que algunos lo hayan encontrado, pero tomando el ejercicio anterior pareciera que la funci√≥n no solo al dividir por cero pueda generar un error. ¬øQu√© pasa si pasamos strings a nuestra funci√≥n como argumento? 

Deber√°s acomodar la soluci√≥n del microdesaf√≠o para que devuelva el mensaje ‚ÄúEl error encontrado es del tipo:‚Äù concatenado con el tipo de error que se encontr√≥ espec√≠fico para cada caso.

Ejemplo:
El error encontrado es del tipo: ZeroDivisionError

a=(input("Ingrese un numero: "))
b=(input("Ingrese otro numero: "))

def dividir(a, b):
    a = int(a)
    b = int(b)
    try:
        resultado = a/b
        return resultado
    except ZeroDivisionError as e:
        print("Ha ocurrido un error del tipo ",type(e).__name__)
        return None # Manejar la divisi√≥n por cero retornando None
    except TypeError as e:
        print("Ha ocurrido un error del tipo ",type(e).__name__)
        return None 
    
print("El resultado de la division es: ", dividir(a,b))
"""
"""Crea un programa que muestre un men√∫ con 4 opciones y, seg√∫n la opci√≥n elegida por el usuario, muestre el tipo de error que se generar√≠a si se ejecutara ese c√≥digo en Python.

Usa las siguientes opciones:
‚ÄòSoy un string‚Äô - 4
4/0
prnt(‚ÄòMostrando codigo‚Äô)
int(‚ÄòQuiero ser un numero‚Äô)
"""
while True:
    print("Men√∫ de Opciones:")
    print("1. 'Soy un string'")
    print("2. 4/0")
    print("3. prnt('Mostrando codigo')")
    print("4. int('Quiero ser un numero')")
    print("5. Salir")

    opcion = input("Elige una opci√≥n (1/2/3/4/5): ")

    if opcion == "1":
        try:
            resultado = 'Soy un string'
            print(type(resultado).__name__)
        except Exception as e:
            print(f"El error encontrado es del tipo: {type(e).__name__}")
    elif opcion == "2":
        try:
            resultado = 4 / 0
            print(resultado)
        except Exception as e:
            print(f"El error encontrado es del tipo: {type(e).__name__}")
    elif opcion == "3":
        try:
            resultado = prnt('Mostrando codigo')
            print(resultado)
        except Exception as e:
            print(f"El error encontrado es del tipo: {type(e).__name__}")
    elif opcion == "4":
        try:
            resultado = int('Quiero ser un numero')
            print(resultado)
        except Exception as e:
            print(f"El error encontrado es del tipo: {type(e).__name__}")
    elif opcion == "5":
        break
    else:
        print("Opci√≥n no v√°lida. Por favor, elige una opci√≥n v√°lida (1/2/3/4/5).")


